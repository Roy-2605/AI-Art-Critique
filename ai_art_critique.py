import streamlit as st
import openai

# Sidebar for OpenAI API key input
st.sidebar.header("API Configuration")
api_key = st.sidebar.text_input("Enter your OpenAI API key:", type="password")
st.sidebar.write("Your API key is required to use the GPT-4 Vision API.")

# Sidebar for user input
st.sidebar.header("Input Image URL")
image_url = st.sidebar.text_input("Enter the URL of the image you want critiqued:")
submit_button = st.sidebar.button("Analyze Artwork")

# Define the OpenAI client
client = openai.OpenAI(api_key=api_key)
st.session_state.client = client

def describe_image(image_url):
  """Describes and critiques an image using the GPT-4 Vision Preview API.

  Args:
    image_url: The URL of the image to describe and critique.

  Returns:
    A dictionary containing the description and critique of the image.
  """

  response = client.chat.completions.create(
    model="gpt-4-vision-preview",
    messages=[
      {
        "role": "user",
        "content": [
          {"type": "text", "text": "Provide a detailed description of the image and a critical analysis of its strengths and weaknesses, considering composition, color, technique, and overall impact."},
          {"type": "image_url", "image_url": image_url}
        ]
      }
    ],
    max_tokens=1000
  )

  output = response.choices[0].message.content
  return output

def iterate_on_response(initial_output, feedback):
    """Iterates on the generated response based on user feedback.

    Args:
        initial_output: The original description and critique generated by the API.
        feedback: The user's feedback on the initial response.

    Returns:
        The revised description and critique.
    """

    revised_response = client.chat.completions.create(
        model="gpt-4-vision-preview",
        messages=[
            {
                "role": "system",
                "content": "Here is the initial critique: " + initial_output
            },
            {
                "role": "user",
                "content": "Based on the following feedback, revise the critique: " + feedback
            }
        ],
        max_tokens=1000
    )

    revised_output = revised_response.choices[0].message.content
    return revised_output

# Streamlit App UI
st.title("AI Art Critique: Enhancing Artistic Understanding with GPT-4 Vision")

# Main area for displaying results
if api_key and submit_button and image_url:
    # Show a loading spinner while the critique is being generated
    with st.spinner("Analyzing the artwork..."):
        # Store the image URL and generate the initial critique
        st.session_state.image_url = image_url
        st.session_state.initial_result = describe_image(image_url)

# Display the image if it's stored in session state
if "image_url" in st.session_state:
    st.image(st.session_state.image_url, caption="Input Image", use_column_width=True)

# Display the initial critique if it exists
if "initial_result" in st.session_state:
    st.subheader("AI-Generated Critique")
    st.write(st.session_state.initial_result)

# Allow the user to provide feedback
if "initial_result" in st.session_state:
    st.subheader("Refine the Critique")
    feedback = st.text_area(
        "Provide feedback to refine the critique:",
        placeholder="E.g., 'Focus more on the subject's expression' or 'The critique didn't emphasize the use of color.'"
    )

    if st.button("Submit Feedback"):
        with st.spinner("Updating critique based on your feedback..."):
            st.session_state.final_result = iterate_on_response(
                st.session_state.initial_result, 
                feedback
            )

    # Display the revised critique if it exists
    if "final_result" in st.session_state:
        st.write("### Revised Critique")
        st.write(st.session_state.final_result)

        # Option to download the critique as a text file
        st.download_button(
            label="Download Critique",
            data=st.session_state.final_result,
            file_name="art_critique.txt",
            mime="text/plain",
        )

        st.success("Feedback submitted and critique updated!")
